// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  departments Department[]
  Major       Major[]
  Student     Student[]
  Lecturer    Lecturer[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  faculty   Faculty    @relation(fields: [facultyId], references: [id])
  facultyId Int // relation scalar field (used in the `@relation` attribute above)
  majorId   Int?
  majors    Major[]
  students  Student[]
  lecturers Lecturer[]
  // levels    Level[]
}

model Major {
  id           Int        @id @default(autoincrement())
  name         String
  students     Student?
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  facultyId    Int // relation scalar field (used in the `@relation` attribute above)
  courses      Course[]
}

model Student {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  firstName    String
  lastName     String
  majorId      Int?
  major        Major?     @relation(fields: [majorId], references: [id])
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  faculty      Faculty    @relation(fields: [facultyId], references: [id])
  facultyId    Int // relation scalar field (used in the `@relation` attribute above)
  level        Int?
}

model Lecturer {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  firstName    String
  lastName     String
  majorId      Int
  title        String
  department   Department @relation(fields: [departmentId], references: [id])
  Faculty      Faculty    @relation(fields: [facultyId], references: [id])
  departmentId Int
  facultyId    Int // relation scalar field (used in the `@relation` attribute above)
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @unique
  code      String   @unique
  semester  Int?
  credit    Int
  elective  Boolean  @default(false)
  level     Int?
  Major     Major?   @relation(fields: [majorId], references: [id])
  majorId   Int?
}
